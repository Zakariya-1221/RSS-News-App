import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Zakariya Ahmed
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // obtain indexes of title, description and link and if they exist

        int titleIndex = getChildElement(channel, "title");
        int descriptionIndex = getChildElement(channel, "description");
        int linkIndex = getChildElement(channel, "link");
        // initialize string variables
        String title = "Empty Title";
        String description = "No Description";
        String link;

        if (channel.child(titleIndex).numberOfChildren() > 0) { //checking if
            title = channel.child(titleIndex).child(0).label(); //title has a child
        } else if (descriptionIndex > 0) {
            title = channel.child(descriptionIndex).child(0).label();
        } else {
            title = "No Information";
        }

        // checks if description has a child and assigns string to its label
        if (channel.child(descriptionIndex).numberOfChildren() < 0) {
            description = "No Description";
        } else {
            if (channel.child(descriptionIndex).numberOfChildren() > 0) {
                description = channel.child(descriptionIndex).child(0).label();
            }
        }

        //assigns link to its child
        link = channel.child(linkIndex).child(0).label(); // include \t for format

        // output statements with html format
        out.print("<html>\n" + "<head>\n" + "\t<title>" + title + "</title>\n"
                + "</head>\n" + "<body>\n" + "\t<h1>\n" + "\t\t<a href=\""
                + link + "\">" + title + "</a>\n" + "\t</h1>\n" + "\t<p>"
                + description + "</p>\n" + "<table border=\"1\">\n" + "\t<tr>\n"
                + "\t\t<th>Date</th>\n" + "\t\t<th>Source</th>\n"
                + "\t\t<th>News</th>\n" + "\t</tr>\n");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        //outputs closing tags for html file

        out.print("\t<table>\n" + "\t<body>\n" + "</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // sets children to number of children in the given node
        int children = xml.numberOfChildren();

        //initializes index with -1
        int index = -1;
        // checks if the given tag appears among the children
        // returning the index of that tag
        for (int i = 0; i < children && index < 0; i++) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }

        }

        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //obtaining indexes for each tag or -1 if they do not exists

        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");

        // initializing string variables

        String news = "No description";
        String link = "";
        String pubDate = "No date available";
        String sourceText = "No source available";
        String sourceLink = " ";

        //checks whether link tag exists and assigns link to text child
        if (linkIndex != -1) {

            link = item.child(linkIndex).child(0).label();

        }

        //checks whether pubDate tag exists and assigns text child to pubDate
        if (pubDateIndex != -1) {
            pubDate = item.child(pubDateIndex).child(0).label();
        }

        out.println("<th>" + pubDate + "</th>");

        int index = -1;
        // checks if sourceLink exists and assigns it to the URL attribute value
        for (int i = 0; i < item.numberOfChildren(); i++) {
            if (item.child(i).label().equals("source")) {
                sourceText = item.child(i).child(0).label();
                sourceLink = item.child(sourceIndex).attributeValue("url");

                index = 0;
                out.print("<th><a href=\"" + sourceLink + "\">" + sourceText
                        + "</th>");
            }

        }
        // if source does not exist assigns it to no source available
        if (index == -1) {
            out.println("<th>" + sourceText + "</th>");

        }

        if (titleIndex != -1) { // check if title tag exists
            //check if child exists
            if (item.child(titleIndex).numberOfChildren() > 0) {
                news = item.child(titleIndex).child(0).label();
                out.println("<th><a href=\"" + link + "\">" + news + "</th>");
            } else { // checks if description child exists
                if (item.child(descriptionIndex).numberOfChildren() > 0) {
                    news = item.child(descriptionIndex).child(0).label();
                    out.println(
                            "<th><a href=\"" + link + "\">" + news + "</th>");
                }
            }
        }

        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree root = new XMLTree1(url);

        // creating html fileWriter
        SimpleWriter fileOut = new SimpleWriter1L(file);
        // checking whether feed is an rss feed
        if (root.label().equals("rss") && root.hasAttribute("version")
                && root.attributeValue("version").equals("2.0")) {
            XMLTree channel = root.child(0);
            outputHeader(channel, fileOut);

            // creating multiple html pages
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileOut);
                }
            }
            outputFooter(fileOut);

        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // asks user for url feed and file name

        out.println(
                "Enter the XML file containing a list of URLs for RSS feeds: ");
        String url = in.nextLine();

        // creating the root of the xml tree using the correct feed
        XMLTree root = new XMLTree1(url);

        out.println("Enter the name of the output file: ");
        String fileName = in.nextLine();

        // creating file output to file
        SimpleWriter fileOut = new SimpleWriter1L(fileName);

        // obtaining string values to create multiple html
        for (int i = 0; i < root.numberOfChildren(); i++) {
            if (root.child(i).label().equals("feed")) {
                String urlRSS = root.child(i).attributeValue("url"); // pages
                String file = root.child(i).attributeValue("file");

                processFeed(urlRSS, file, fileOut);

            }
        }

        // obtaining title for the index page
        String title = root.attributeValue("title");

        //outputting html page using file output

        fileOut.print("<html>\n" + "<head>\n" + "\t<title>" + title
                + "</title>\n" + "</head>\n" + "<body>\n" + "<head>\n"
                + "\t<h1>\n" + title + "\t</h1>\n" + "</head>\n" + "\t<ul>\n");

        // creating multiple html files using file and name
        for (int j = 0; j < root.numberOfChildren(); j++) {
            fileOut.println("<li><a href=\""
                    + root.child(j).attributeValue("file") + "\">"
                    + root.child(j).attributeValue("name") + "</a></li>");
        }

        // closing ending tags for html page
        fileOut.println("</ul>");
        fileOut.println("</body>");
        fileOut.println("</html>");

        // closing file output
        fileOut.close();
        in.close();
        out.close();
    }

}
